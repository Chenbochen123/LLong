<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        /9j/7gAOQWRvYmUAZAAAAAAB/+EAGEV4aWYAAElJKgAIAAAAAAAAAAAAAAD/7AARRHVja3kAAQAEAAAA
        UAAA/+EDemh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8APD94cGFja2V0IGJlZ2luPSLvu78iIGlk
        PSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4gPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczpt
        ZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENvcmUgNS41LWMwMjEgNzkuMTU0OTExLCAyMDEzLzEwLzI5
        LTExOjQ3OjE2ICAgICAgICAiPiA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5
        OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPiA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIiB4bWxu
        czp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6
        Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtbG5zOnhtcD0iaHR0cDov
        L25zLmFkb2JlLmNvbS94YXAvMS4wLyIgeG1wTU06T3JpZ2luYWxEb2N1bWVudElEPSJ4bXAuZGlkOjM4
        ODUxOTAxLWJlNzQtMGY0YS05MzgyLTMwZTdhNDZlYzhmMCIgeG1wTU06RG9jdW1lbnRJRD0ieG1wLmRp
        ZDo0NDcwODMwMEE0MzgxMUUzODI5RTlGNDFGNTc0N0FFRCIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlp
        ZDo0NDU0Mzg5OUE0MzgxMUUzODI5RTlGNDFGNTc0N0FFRCIgeG1wOkNyZWF0b3JUb29sPSJBZG9iZSBQ
        aG90b3Nob3AgQ0MgKFdpbmRvd3MpIj4gPHhtcE1NOkRlcml2ZWRGcm9tIHN0UmVmOmluc3RhbmNlSUQ9
        InhtcC5paWQ6NGY2N2Y4ZDItNzRlOS1iNDRlLWI2MzUtNTc2YjIwNmM1OTBiIiBzdFJlZjpkb2N1bWVu
        dElEPSJ4bXAuZGlkOjM4ODUxOTAxLWJlNzQtMGY0YS05MzgyLTMwZTdhNDZlYzhmMCIvPiA8L3JkZjpE
        ZXNjcmlwdGlvbj4gPC9yZGY6UkRGPiA8L3g6eG1wbWV0YT4gPD94cGFja2V0IGVuZD0iciI/Pv/bAEMA
        AgICAgICAgICAgMCAgIDBAMCAgMEBQQEBAQEBQYFBQUFBQUGBgcHCAcHBgkJCgoJCQwMDAwMDAwMDAwM
        DAwMDP/bAEMBAwMDBQQFCQYGCQ0LCQsNDw4ODg4PDwwMDAwMDw8MDAwMDAwPDAwMDAwMDAwMDAwMDAwM
        DAwMDAwMDAwMDAwMDP/AABEIAFAAegMBEQACEQEDEQH/xAAfAAABBQEBAQEBAQAAAAAAAAAAAQIDBAUG
        BwgJCgv/xAC1EAACAQMDAgQDBQUEBAAAAX0BAgMABBEFEiExQQYTUWEHInEUMoGRoQgjQrHBFVLR8CQz
        YnKCCQoWFxgZGiUmJygpKjQ1Njc4OTpDREVGR0hJSlNUVVZXWFlaY2RlZmdoaWpzdHV2d3h5eoOEhYaH
        iImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4eLj5OXm5+jp6vHy
        8/T19vf4+fr/xAAfAQADAQEBAQEBAQEBAAAAAAAAAQIDBAUGBwgJCgv/xAC1EQACAQIEBAMEBwUEBAAB
        AncAAQIDEQQFITEGEkFRB2FxEyIygQgUQpGhscEJIzNS8BVictEKFiQ04SXxFxgZGiYnKCkqNTY3ODk6
        Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqCg4SFhoeIiYqSk5SVlpeYmZqio6Slpqeoqaqy
        s7S1tre4ubrCw8TFxsfIycrS09TV1tfY2dri4+Tl5ufo6ery8/T19vf4+fr/2gAMAwEAAhEDEQA/AP3U
        0vTNP1CwtdQ1G1iv57+JbjFwgkWNZAGVEVgQoUEDgc9TQBof2BoH/QEsP/AaL/4mgA/sDQP+gJYf+A0X
        /wATQAf2BoH/AEBLD/wGi/8AiaAD+wNA/wCgJYf+A0X/AMTQAf2BoH/QEsP/AAGi/wDiaAD+wNA/6Alh
        /wCA0X/xNAB/YGgf9ASw/wDAaL/4mgA/sDQP+gJYf+A0X/xNAB/YGgf9ASw/8Bov/iaAD+wNA/6Alh/4
        DRf/ABNAB/YGgf8AQEsP/AaL/wCJoAP7A0D/AKAlh/4DRf8AxNAB/YGgf9ASw/8AAaL/AOJoAa2gaIVY
        Rabb2rkfLPbRrDIp9VdACDQBxH9pX/8Az8f8xX+wPur/AK3/AJ+enX26e1AHbaAR/YWi/wDXhbf+iloA
        1sigAyKADIoAMigAyKADIoAMigAyKADIoAMigAyKADIoAMigAyKAPJs/+p5QB3+gkf2Hov8A14W3/opa
        ANbcKADcKADcKADcKADcKADcKADcKADcKADcKADcKADcKADcKADcKADcKAPJ8/8AqdZoA73Qif7D0b/r
        xt//AEUtAGtuNABuNABuNABuNABuNABuNABuNABuNABuNABuNABuNABuNABuNABuNAHlWf8A1Oc0Ad1o
        ZH9iaP8A9eNv/wCi1oA1MigAyKADIoAMigAyKADIoAMigAyKADIoAMigAyKADIoAMigAyKAPLs/+ptQB
        3GiE/wBi6R/15W//AKLWgDU3GgA3GgA3GgA3GgA3GgA3GgA3GgA3GgA3GgA3GgA3GgA3GgA3GgA3GgDz
        DP8A6muaAO20Vv8AiTaTz/y5Qf8AotaANLd70AG73oAN3vQAbvegA3e9ABu96ADd70AG73oAN3vQAbve
        gA3e9ABu96ADd70AG73oA80z7/8AM5ZoA7TRm/4k+lcf8ucH/otaANLd7UAG72oAN3tQAbvagA3e1ABu
        9qADd7UAG72oAN3tQAbvagA3e1ABu9qADd7UAG72oA82z/6mOaAOz0Yn+yNK/wCvOD/0WtAGluNABuNA
        BuNABuNABuNABuNABuNABuNABuNABuNABuNABuNABuNABuNAHnGf/UvzQB1Vrd2+m20NhfTJZyWaLCrT
        MEWRUG1XRiQCCB+FAFj+2dJ/6Cln/wB/4/8A4qgA/tnSf+gpZ/8Af+P/AOKoAP7Z0n/oKWf/AH/j/wDi
        qAD+2dJ/6Cln/wB/4/8A4qgA/tnSf+gpZ/8Af+P/AOKoAP7Z0n/oKWf/AH/j/wDiqAD+2dJ/6Cln/wB/
        4/8A4qgA/tnSf+gpZ/8Af+P/AOKoAP7Z0n/oKWf/AH/j/wDiqAD+2dJ/6Cln/wB/4/8A4qgA/tnSf+gp
        Z/8Af+P/AOKoAP7Z0n/oKWf/AH/j/wDiqAD+2dJ/6Cln/wB/4/8A4qgBP7Y04giK8huZP4YYHEsjH0Co
        STQBh/2JqP8AzxH/AB+/2z95f9d/zw69ffpQB//Z
</value>
  </data>
</root>