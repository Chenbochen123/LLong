<?xml version="1.0" encoding="utf-8" ?>
<sqlMap namespace="Mesnac.Quality.Mapper.BusinessMapper.FqbStandardDetail"
	xmlns="http://ibatis.apache.org/mapping"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

   <statements>
	 <!--查询数据-->
    <sql id="includeSelect">
      <![CDATA[SELECT * FROM FQB_STANDARD_DETAIL ]]>
    </sql>
    <!--查询条件-->
    <sql id="includeWhere">
	  <dynamic prepend="WHERE">
        <isNotNull property="where.ObjId" prepend="AND">
          <![CDATA[OBJID = #where.ObjId#]]>
        </isNotNull>
        <isNotNull property="where.EquipId" prepend="AND">
          <![CDATA[EQUIP_ID = #where.EquipId#]]>
        </isNotNull>
        <isNotNull property="where.MaterialId" prepend="AND">
          <![CDATA[MATERIAL_ID = #where.MaterialId#]]>
        </isNotNull>
        <isNotNull property="where.BcheckFlag" prepend="AND">
          <![CDATA[BCHECK_FLAG = #where.BcheckFlag#]]>
        </isNotNull>
        <isNotNull property="where.UcheckFlag" prepend="AND">
          <![CDATA[UCHECK_FLAG = #where.UcheckFlag#]]>
        </isNotNull>
        <isNotNull property="where.RecordUserId" prepend="AND">
          <![CDATA[RECORD_USER_ID = #where.RecordUserId#]]>
        </isNotNull>
        <isNotNull property="where.RecordTime" prepend="AND">
          <![CDATA[RECORD_TIME = #where.RecordTime#]]>
        </isNotNull>
        <isNotNull property="where.FactoryId" prepend="AND">
          <![CDATA[FACTORY_ID = #where.FactoryId#]]>
        </isNotNull>
        <isNotNull property="where.WorkshopId" prepend="AND">
          <![CDATA[WORKSHOP_ID = #where.WorkshopId#]]>
        </isNotNull>
        <isNotNull property="where.BakupFlag" prepend="AND">
          <![CDATA[BAKUP_FLAG = #where.BakupFlag#]]>
        </isNotNull>
        <isNotNull property="where.BakupTime" prepend="AND">
          <![CDATA[BAKUP_TIME = #where.BakupTime#]]>
        </isNotNull>
      </dynamic>
    </sql>
    <!--排序条件-->
    <sql id="includeOrderString">
      <isNotNull property="OrderString" prepend="">
        ORDER BY $OrderString$
      </isNotNull>
    </sql>

    <!--查询实例说明-->
    <select id="GetPageDataByReader" parameterClass="map" resultClass="Row"> 
	  <include refid="includeSelect"/>
      <include refid="includeWhere"/>
      <include refid="includeOrderString"/>
    </select>

     <insert id="InitMaterialX" parameterClass="map" resultClass="Row">
       <![CDATA[ 
      insert into FQB_QUALITY_STANDARD (objid,material_id,equip_id)   
      select seq_fqb_quality_standard.nextval,  t1.objid,t2.objid from v_cbm_materialinfo t1,sbe_equip t2
      where not EXISTS (select 1 from  FQB_QUALITY_STANDARD t0 where t0.MATERIAL_ID=t1.ObjId and t0.equip_id=t2.objid)
      and t2.minor_type_id=6101
      ]]>
     </insert>


     <select id="RefleshDataX" parameterClass="map" resultClass="Row">
       <![CDATA[ 
      select t0.objid,t1.material_name,t1.material_code,t0.xstandard_id,t2.equip_name
      from fqb_quality_standard t0,v_cbm_materialinfo t1 ,sbe_equip t2
      where t0.material_id=t1.ObjId and t0.equip_id=t2.objid and t2.minor_type_id=6101
      ]]>
       <dynamic>
         <isNotNull property="where.MATERIAL_NAME" prepend="AND">
           <![CDATA[ t1.material_name like '%$where.MATERIAL_NAME$%']]>
         </isNotNull>
         <isNotNull property="where.MATERIAL_CODE" prepend="AND">
           <![CDATA[ t1.material_code like '%'||#where.MATERIAL_CODE#||'%']]>
         </isNotNull>
         <isNotNull property="where.EQUIP_NAME" prepend="AND">
           <![CDATA[ t2.equip_name like '%'||#where.EQUIP_NAME#||'%']]>
         </isNotNull>
       </dynamic>
     </select>
     <update id="UpdateByObjIdX" parameterClass="map">
       <![CDATA[   
          UPDATE FQB_QUALITY_STANDARD SET
          XSTANDARD_ID = #XstandardId#
          WHERE (OBJID = #ObjId#) 
      ]]>
     </update>
     <insert id="InitMaterialB" parameterClass="map" resultClass="Row">
       <![CDATA[ 
       insert into fqb_standard_detail (objid,material_id,equip_id) 
       select seq_fqb_standard_detail.nextval,t1.objid,t2.objid from FQB_QUALITY_STANDARD t1,sbe_equip t2
       where not EXISTS (select 1 from  fqb_standard_detail t0 where t0.MATERIAL_ID=t1.material_id and t0.equip_id=t2.objid)
       and t2.minor_type_id=6102 and t1.bstandard_id is not null
      ]]>
     </insert>


     <select id="RefleshDataB" parameterClass="map" resultClass="Row">
       <![CDATA[ 
        select t0.objid,t1.material_name,t1.material_code,t2.equip_name,t0.bcheck_flag,t0.material_id,t3.bstandard_id
      from fqb_standard_detail t0,v_cbm_materialinfo t1 ,sbe_equip t2,fqb_quality_standard t3
      where t0.material_id=t1.objid and t0.equip_id=t2.objid and t2.minor_type_id=6102 and t3.material_id=t0.material_id 
      ]]>
       <dynamic>
         <isNotNull property="where.MATERIAL_NAME" prepend="AND">
           <![CDATA[ t1.material_name like '%$where.MATERIAL_NAME$%']]>
         </isNotNull>
         <isNotNull property="where.MATERIAL_CODE" prepend="AND">
           <![CDATA[ t1.material_code like '%'||#where.MATERIAL_CODE#||'%']]>
         </isNotNull>
         <isNotNull property="where.EQUIP_ID" prepend="AND">
           <![CDATA[ t0.equip_id = #where.EQUIP_ID#]]>
         </isNotNull>
       </dynamic>
       <dynamic prepend="order by">
         <![CDATA[ t0.equip_id,t0.material_id]]>
         
       </dynamic>
     </select>
     <update id="UpdateByObjIdB" parameterClass="map">
       <![CDATA[   
          UPDATE fqb_standard_detail SET
          bcheck_flag = #BcheckFlag#
          WHERE (OBJID = #ObjId#) 
      ]]>
     </update>
     <insert id="InitMaterialU" parameterClass="map" resultClass="Row">
       <![CDATA[ 
      insert into FQB_QUALITY_STANDARD (objid,material_id,equip_id)   
      select seq_fqb_quality_standard.nextval,  t1.objid,t2.objid from v_cbm_materialinfo t1,sbe_equip t2
      where not EXISTS (select 1 from  FQB_QUALITY_STANDARD t0 where t0.MATERIAL_ID=t1.ObjId and t0.equip_id=t2.objid)
      and t2.minor_type_id=6103
      ]]>
     </insert>

     <select id="RefleshDataU" parameterClass="map" resultClass="Row">
       <![CDATA[ 
      select t0.objid,t1.material_name,t1.material_code,t0.ustandard_id,t2.equip_name
      from fqb_quality_standard t0,v_cbm_materialinfo t1 ,sbe_equip t2
      where t0.material_id=t1.ObjId and t0.equip_id=t2.objid and t2.minor_type_id=6103
      ]]>
       <dynamic>
         <isNotNull property="where.MATERIAL_NAME" prepend="AND">
           <![CDATA[ t1.material_name like '%$where.MATERIAL_NAME$%']]>
         </isNotNull>
         <isNotNull property="where.MATERIAL_CODE" prepend="AND">
           <![CDATA[ t1.material_code like '%'||#where.MATERIAL_CODE#||'%']]>
         </isNotNull>
         <isNotNull property="where.EQUIP_NAME" prepend="AND">
           <![CDATA[ t2.equip_name like '%'||#where.EQUIP_NAME#||'%']]>
         </isNotNull>
       </dynamic>
     </select>
     <update id="UpdateByObjIdU" parameterClass="map">
       <![CDATA[   
          UPDATE FQB_QUALITY_STANDARD SET
          USTANDARD_ID = #UstandardId#
          WHERE (OBJID = #ObjId#) 
      ]]>
     </update>
     <select id="GetMaterialsOnEquip" parameterClass="map" resultClass="Row">
       <![CDATA[   
          select T1.WORKSHOP_EQUIP_ID,material_id from FQB_STANDARD_DETAIL T0 
          LEFT JOIN FQB_WORKSHOP_EQUIPID T1 ON T1.EQUIP_ID=T0.EQUIP_ID
          where T0.bcheck_flag=1
      ]]>
     </select>

     <select id="GetTyreDefectInfo" parameterClass="map" resultClass="Row">
       <!--<![CDATA[ 
        SELECT TA.OBJID,TA.DEFECTNAME,TA.DEFECTCODE,TA.WORK_PROCESS_ID,TA.REMARK,TB.PROCEDURE_NAME 
        FROM FQD_DEFECT_INFO TA
        LEFT JOIN SSB_PROCEDURE TB ON TB.OBJID=TA.WORK_PROCESS_ID
        WHERE TA.WORK_PROCESS_ID = #PROCESS_ID#
        order by TA.OBJID
      ]]>-->
       <![CDATA[ 
        SELECT TA.OBJID,TA.DEFECTNAME
        FROM FQD_DEFECT_INFO TA
        LEFT JOIN SSB_PROCEDURE TB ON TB.OBJID=TA.WORK_PROCESS_ID
        WHERE TA.WORK_PROCESS_ID = #PROCESS_ID#
        order by TA.OBJID
      ]]>
     </select>

     <select id="GetCuringInfoAndDegrade" parameterClass="map" resultClass="Row">
       <![CDATA[ SELECT C.OBJID MATERIAL_ID,C.MATERIAL_NAME,D.DEGRADE_ID ,e.gradeid WG_DEGRADE_ID,
case when f.first_barcode is not null then '1' when g.end_barcode is not null then '2' else '0' end iserror
 FROM CPP_CURING_PRODUCTION A
        LEFT JOIN CPP_CURING_PLAN_DETAIL B ON A.PLAN_DETAIL_ID = B.OBJID
        LEFT JOIN SBM_MATERIAL C ON B.MATERIAL_ID = C.OBJID
        LEFT JOIN CPP_CURING_DEGRADE D ON D.TYRE_NO = A.TYRE_NO
        left join fqf_fcheck_info e on e.tyreid = a.tyre_no and e.new_flag = 1
        left join cpp_onerrorbarcode f on f.first_barcode = a.tyre_no
        left join cpp_onerrorbarcode g on g.end_barcode = a.tyre_no
        WHERE A.TYRE_NO = #TyreNo#
      ]]>
     </select>

     <!--规格配套设定start-->
     <insert id="InitMaterialFPTNEW" parameterClass="map" resultClass="Row">
       <![CDATA[ 
       insert into FQF_PTSTANDARD_DETAIL (objid,material_id) 
       select SEQ_FQF_PTSTANDARD_DETAIL.nextval,t1.Material_Id from v_cbm_materialinfo t1
       where not EXISTS (select 1 from  FQF_PTSTANDARD_DETAIL t0 where t0.MATERIAL_ID=t1.material_id)
      ]]>
     </insert>
     <select id="GetPTInfo" parameterClass="map" resultClass="Row">
       <![CDATA[ 
       SELECT B.MATERIAL_NAME, A.* FROM FQF_PTSTANDARD_DETAIL A
       LEFT JOIN SBM_MATERIAL B ON A.MATERIAL_ID = B.OBJID  
       WHERE A.OBJID = #OBJID#
      ]]>
     </select>
     <update id="UpdatePTStandard" parameterClass="map" >
       <![CDATA[
       UPDATE FQF_PTSTANDARD_DETAIL SET PT_TYPE_ID = #PT_TYPE#,RECORD_USER_ID = #USER#,
       RECORD_TIME = #TIME#
       WHERE OBJID = #OBJID#
      ]]>
     </update>
     <select id="RefleshDataFPTNEW" parameterClass="map" resultClass="Row">
       <![CDATA[ 
       SELECT T5.USER_NAME,
       T6.MATERIAL_NAME,T6.SAP_CODE,
       CASE T.PT_TYPE_ID WHEN 1 THEN '普通配套' WHEN 5 THEN '非配套' WHEN 2 THEN 'A2配套' WHEN 3 THEN 'A3配套' WHEN 9 THEN '高端零销' END PT_TYPE,
       T.* FROM FQF_PTSTANDARD_DETAIL T
       LEFT JOIN SSB_USER T5 ON T.RECORD_USER_ID = T5.OBJID
       LEFT JOIN SBM_MATERIAL T6 ON T.MATERIAL_ID = T6.OBJID
       WHERE 1=1 
      ]]>
       <dynamic>
         <isNotNull property="where.MaterialName" prepend="AND">
           <![CDATA[ T6.MATERIAL_NAME like  '%'|| #where.MaterialName# ||'%']]>
         </isNotNull>
         <isNotNull property="where.SapCode" prepend="AND">
           <![CDATA[ T6.SAP_CODE = #where.SapCode#]]>
         </isNotNull>
       </dynamic>
       <dynamic prepend="ORDER BY">
         <![CDATA[T.PT_TYPE_ID,T6.SAP_CODE]]>
       </dynamic>
     </select>
     <!--规格配套设定 end -->

     <select id="GetFcheckLockEquip" parameterClass="map" resultClass="Row">
       <![CDATA[   
          select to_char(DEFECTNAME) DEFECTNAME, to_char(ALARM_CONTROL) ALARM_CONTROL,TO_CHAR(NVL(ALARM_COUNT,0)) ALARM_COUNT,TO_CHAR(NVL(ALARM_TIME,0)) ALARM_TIME, to_char(C.EQUIP_NAME) EQUIP_NAME,
        CASE WHEN EQUIP_POSITION = 1 THEN '左模' else '右模' end mould,to_char(A.OBJID) OBJID,SYSDATE RECORD_TIME,'' TYREID   from  FQD_DEFECT_INFO A
        inner JOIN CPP_CURING_PRODUCTION B ON B.DELETE_FLAG = 0 
        LEFT JOIN SBE_EQUIP C ON C.OBJID = B.EQUIP_ID AND C.DELETE_FLAG = 0 
          where work_process_id = 500 and A.delete_flag = 0 and defectname = #defectname#  AND B.TYRE_NO = #barcode#
        and b.end_time > sysdate - (select NVL(ALARM_TIME,0) from FQD_DEFECT_INFO where  work_process_id = 500 and delete_flag = 0 and defectname = #defectname#)/24 
        
        UNION ALL
        SELECT * FROM ( SELECT distinct '' a,'' b,'' c,'' d,'' e,'' f,'' G,max(a.record_time) record_time,a.TYREID from  fqf_fcheck_info  a
        inner join cpp_curing_production b on a.tyreid = b.tyre_no and b.delete_flag = 0
        where a.delete_flag = 0 and (substr(a.defectname,4,length(a.defectname)) =#defectname# or a.defectname = #defectname#)
        and b.equip_id = (select equip_id from cpp_curing_production where tyre_no = #barcode#)
        and b.equip_position = (select equip_position from cpp_curing_production where tyre_no = #barcode#)
        and b.end_time > sysdate - (select NVL(ALARM_TIME,0) from FQD_DEFECT_INFO where  work_process_id = 500 and delete_flag = 0 and defectname = #defectname#)/24 
        and a.gradeid = 5 
        group by a.TYREID
        order by record_time desc)
       ]]>
     </select>
     <select id="GetFcheckLockEquipjj" parameterClass="map" resultClass="Row">
       <![CDATA[ 
       select to_char(DEFECTNAME) DEFECTNAME, to_char(ALARM_CONTROL) ALARM_CONTROL,TO_CHAR(NVL(ALARM_COUNT_JJ,0)) ALARM_COUNT_JJ,TO_CHAR(NVL(ALARM_TIME,0)) ALARM_TIME, to_char(C.EQUIP_NAME) EQUIP_NAME,
        CASE WHEN EQUIP_POSITION = 1 THEN '左模' else '右模' end mould,to_char(A.OBJID) OBJID,SYSDATE RECORD_TIME,'' TYREID   from  FQD_DEFECT_INFO A
        inner JOIN CPP_CURING_PRODUCTION B ON B.DELETE_FLAG = 0 
        LEFT JOIN SBE_EQUIP C ON C.OBJID = B.EQUIP_ID AND C.DELETE_FLAG = 0 
          where work_process_id = 500 and A.delete_flag = 0 and defectname = #defectname#  AND B.TYRE_NO = #barcode#
        and b.end_time > sysdate - (select NVL(ALARM_TIME,0) from FQD_DEFECT_INFO where  work_process_id = 500 and delete_flag = 0 and defectname = #defectname#)/24 
        
        UNION ALL
        SELECT * FROM ( SELECT distinct '' a,'' b,'' c,'' d,'' e,'' f,'' G,max(a.record_time) record_time,a.TYREID from  fqf_fcheck_info  a
        inner join cpp_curing_production b on a.tyreid = b.tyre_no and b.delete_flag = 0
        where a.delete_flag = 0 and (substr(a.defectname,4,length(a.defectname)) =#defectname#  or a.defectname = #defectname# )
        and b.equip_id = (select equip_id from cpp_curing_production where tyre_no = #barcode#)
        and b.equip_position = (select equip_position from cpp_curing_production where tyre_no = #barcode#)
        and b.end_time > sysdate - (select NVL(ALARM_TIME,0) from FQD_DEFECT_INFO where  work_process_id = 500 and delete_flag = 0 and defectname = #defectname# )/24 
        and not exists (select aa.tyreid from fqf_fcheck_info aa where aa.tyreid = a.tyreid and aa.new_flag = 0 and aa.gradeid = a.gradeid )
        and (a.gradeid = 2 or a.gradeid = 3 or a.gradeid = 4)
        group by a.TYREID
        order by record_time desc)
        
       ]]>
     </select>

  </statements>
</sqlMap>
